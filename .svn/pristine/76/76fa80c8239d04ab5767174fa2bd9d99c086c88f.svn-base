<template>
	<div class="wrapper">
		<div id="bdmap">
			
		</div>
		<!-- 地图上层页面 -->
		<div class="map-legend">
			<p class="legend-item"><i class="legend-item-icon forbid"></i>禁飞</p>
			<p class="legend-item"><i class="legend-item-icon limit"></i>限飞</p>
		</div>
		<div class="map-range" :class="{showPicker:isShowpicker}" v-if="showRange">
			<div class="toolbar" @click="togglePicker">
				<i class="iconfont" :class="{'icon-unfold':isShowpicker,'icon-packup':!isShowpicker}"></i>
				飞行范围：{{range}}
			</div>
			<mt-picker :slots="rangeSlot" @change="onRangeChange" :visible-item-count="3"></mt-picker>
		</div>
	</div>
	
</template>

<script>
	import planeIcon from '../assets/img/map/uPlane-red.png'
	export default {
		data(){
			return {
				range: "300",
				rangeSlot: [{
					flex: 1,
					values: ['100', '300', '500', '1000', '2000', '3000'],
					className: 'slot1',
					textAlign: 'center'
			    }],
			    isShowpicker: false,
			    map: null,
			    overlays:{
			    	marker: null,
			    	circle: null,
			    	startMarker: null,
			    	endMarker: null
			    },
			    marker: null,
			    circle: null,
			    pageType: "area"//页面功能，起始点、结束点、划区域
			}
		},
		props:["showRange"],
		methods: {
			onRangeChange(picker, values) {
				if(values[0]){
					console.log("onRangeChange")
					var range = this.range = values[0];
					// this.map.removeOverlay(this.circle)
					this.circle.setRadius(range);
					// this.map.addOverlay(this.circle);
					this.refreshZoom();
				}
			},
			togglePicker() {
				this.isShowpicker = !this.isShowpicker;
			},
			//限飞区
			addLimitArea() {
				var limitPolygon = new BMap.Polygon([
					new BMap.Point(118.77807441, 32.09923550),
			        new BMap.Point(118.79817441, 32.05723750),
			        new BMap.Point(118.87809441, 32.0623550)
				],{
					fillColor:"#ff8f00",
					strokeWeight:1,
					fillOpacity:0.5,
					strokeOpacity:0.3
				});
				limitPolygon.disableMassClear();
				this.map.addOverlay(limitPolygon);
			},
			//禁飞区
			addForbidArea() {
				var forbidPolygon = new BMap.Polygon([
					new BMap.Point(118.97807441, 32.06923550),
			        new BMap.Point(118.75817441, 32.05923750),
			        new BMap.Point(118.87809441, 32.0923550)
				],{
					fillColor:"#f44336",
					strokeWeight:1,
					fillOpacity:0.5,
					strokeOpacity:0.3
				});
				forbidPolygon.disableMassClear();
				this.map.addOverlay(forbidPolygon);

			},
			refreshZoom() {
				var map = this.map;
				var cirBounds = this.circle.getBounds();
				var Ll = cirBounds.Ll;
				var ul = cirBounds.ul;
				var _m = map.getViewport([Ll,ul]);
				// console.log(cirBounds,_m)
				map.setZoom(_m.zoom-1);
				map.panTo(_m.center);
			},
			initOverlays() {
				
			}
		},
		mounted() {
			var self = this;
			var type = this.pageType = this.$route.params.type;
			var map = this.map = new BMap.Map("bdmap");
			map.centerAndZoom(new BMap.Point(115.404, 32.915), 5);
			this.addLimitArea();
			this.addForbidArea();



			this.initOverlays();
			var geolocation = new BMap.Geolocation();
			geolocation.getCurrentPosition(function(res){
				console.log(res)
				if(this.getStatus() == "0" && res.point){
					var longitude = res.point.longitude;
					var latitude = res.point.latitude;
					var point = res.point;
					map.setZoom(13);
					map.panTo(point);
					//地图标点
					var point_icon = new BMap.Icon(planeIcon, new BMap.Size(32,32));
					var marker = self.marker = new BMap.Marker(point);
					marker.setIcon(point_icon);
					marker.enableDragging();
					map.addOverlay(marker);  

					//地图画圈
					var circle = self.circle = new BMap.Circle(point,self.range,{fillColor:"blue", strokeWeight: 1 ,fillOpacity: 0.3, strokeOpacity: 0.3});
					map.addOverlay(circle);

					self.refreshZoom();

					marker.addEventListener("dragstart",function(e){
						map.removeOverlay(circle);
						self.addLimitArea()
						self.addForbidArea()
					});
					
					marker.addEventListener("dragend",function(){
						var point = this.getPosition();
						circle.setCenter(point);
						map.addOverlay(circle);
						self.refreshZoom()
					});

					map.addEventListener("click",function(e){
						map.removeOverlay(circle);
						self.addLimitArea()
						self.addForbidArea()
						console.log(e)
						var point = e.point;
						circle.setCenter(point);
						map.addOverlay(circle);
						marker.setPosition(point);
						self.refreshZoom()
					});

				}else{

				}
			},{enableHighAccuracy: true})  
		}
	}
</script>

<style scoped lang="scss">
	@import '../assets/sass/_base.scss';
	.wrapper{
		width: 100%;
		height: 100%;
		overflow: hidden;
		position: relative;
	}
	#bdmap{
		position: absolute;
		top: 0;
		bottom: 0;
		left: 0;
		right: 0;
	}
	
	.map-legend{
		background-color: #fff;
		border: 1px solid $border-color;
		position: absolute;
		top: 10px;
		left: 10px;
		box-shadow: 2px 3px 10px #888888;
		.legend-item{
			line-height: 28px;
			padding: 0 15px 0 10px;

			.legend-item-icon{
				display: inline-block;
				width: 20px;
				height: 20px;
				border-radius: 50%;
				background-color: #ccc;
				vertical-align: middle;
				margin-right: 10px;
				position: relative;
				top: -1px;
				&.forbid{
					background-color: #f44336;
				}
				&.limit{
					background-color: #ff8f00;
				}
			}
		}
	}
	.map-range{
		position: absolute;
		width: 100%;
		bottom: -108px;
		background-color: #fff;
		transition: all .5s;
		&.showPicker{
			bottom: 0px;
		}
		.toolbar{
			text-align: center;
			height: 40px;
			line-height: 40px;
			border-bottom: 1px solid $border-color;
			border-top: 1px solid $border-color;
			color: $theme-color;
			.iconfont{
				font-size: 20px;
				vertical-align: middle;
			}
		}
	}
</style>
